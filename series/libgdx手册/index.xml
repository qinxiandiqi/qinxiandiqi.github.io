<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>libGDX手册 on 琴弦第七</title><link>https://www.qinxiandiqi.sbs/series/libgdx%E6%89%8B%E5%86%8C/</link><description>Recent content in libGDX手册 on 琴弦第七</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2012-2023 Jianan. All Rights Reserved.</copyright><lastBuildDate>Sun, 26 Aug 2018 13:37:49 +0800</lastBuildDate><atom:link href="https://www.qinxiandiqi.sbs/series/libgdx%E6%89%8B%E5%86%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>libGDX的线程</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%BA%BF%E7%A8%8B/</link><pubDate>Sun, 26 Aug 2018 13:37:49 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%BA%BF%E7%A8%8B/</guid><description>所有ApplicationListener接口中的方法都会在同个OpenGL的渲染线程中被调用。对于大多数游戏来说，一般在ApplicationListener.render()方法中实现游戏的更新逻辑，这个方法会在渲染线程中执行。
任何涉及OpenGL的图形操作都需要在渲染线程上执行。如果在其它线程上执行会导致一些无法预测的结果，这是因为OpenGL Context只有在渲染线程中才处于激活状态，对于大多数Android设备而言，在其它线程中创建OpenGL Context会导致一些问题，因此不支持这</description></item><item><title>libGDX的日志</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%97%A5%E5%BF%97/</link><pubDate>Sun, 05 Aug 2018 11:55:14 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%97%A5%E5%BF%97/</guid><description>Application接口提供了简单但可以精确控制的日志打印功能。
日志消息可以输出为普通信息，或者是带可选异常的错误消息，也可以是调试信息：</description></item><item><title>查询libGDX运行时环境的相关信息</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/%E6%9F%A5%E8%AF%A2libgdx%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/</link><pubDate>Sun, 05 Aug 2018 08:46:41 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/%E6%9F%A5%E8%AF%A2libgdx%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF/</guid><description>Application接口提供了一些列查询libGDX运行时环境参数的方法。</description></item><item><title>libGDX的启动类和配置</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E5%90%AF%E5%8A%A8%E7%B1%BB%E5%92%8C%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 22 Jul 2018 18:26:50 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E5%90%AF%E5%8A%A8%E7%B1%BB%E5%92%8C%E9%85%8D%E7%BD%AE/</guid><description>对于每个目标平台，我们都必须编写对应的启动类。这个类根据特定的底层平台实现&lt;code>Application&lt;/code>接口，同时也实现提供应用逻辑代码的&lt;code>ApplicationListener&lt;/code>接口。这个启动类依赖于具体的底层平台，下面让我们来看看启动类在每个底层平台上的实现和配置。</description></item><item><title>libGDX的模块</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 15 Jul 2018 16:36:03 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%A8%A1%E5%9D%97/</guid><description>LibGDX，对应典型游戏设计架构的每个步骤，它都提供了一系列模块来提供相应服务。
Input输入模块 - 为所有平台提供了统一的输入和处理模型。它支持键盘、触屏、加速度计和鼠标等可用输入设备。 Graphics图形模块 - 它通过OpenGL ES API的方式使用硬件，将图形绘制到屏幕上。 Files文件模块 - 它不关心具体操作的媒体文件类型，它为所有平台统一提供了抽象化的，简易的方法来进行媒体文件的读写操作。 Audio音频模块 - 提供了有助于在所有平台上录制和播放音频的功能。</description></item><item><title>libGDX的生命周期</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Sun, 01 Jul 2018 15:53:00 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>libGDX应用程序具有明确定义的生命周期，用于处理应用程序的不同的状态，例如应用程序的创建、暂停、恢复、渲染和（销毁）释放等等。</description></item><item><title>libGDX的应用框架</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/</link><pubDate>Sun, 01 Jul 2018 14:34:08 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/</guid><description>作为libGDX的核心（译注：也是libGDX实现跨平台的基础），libGDX提供了6个通用接口来与具体的操作系统进行交互，不同的操作系统对这6个接口有不同的具体实现。</description></item></channel></rss>