<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JUnit学习笔记 on 琴弦第七</title><link>https://www.qinxiandiqi.sbs/series/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><description>Recent content in JUnit学习笔记 on 琴弦第七</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2012-2022 Jianan. All Rights Reserved.</copyright><lastBuildDate>Sun, 29 Jun 2014 12:28:31 +0800</lastBuildDate><atom:link href="https://www.qinxiandiqi.sbs/series/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>JUnit 学习笔记 第二记</title><link>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</link><pubDate>Sun, 29 Jun 2014 12:28:31 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</guid><description>&lt;p>1、JUnit4添加了新的方法用于在测试类中所有测试方法执行之前或者执行之后执行，具体使用方法是使用注解@BeforeClass或者@AfterClass注解注解在public static void修饰的并且没有参数的方法之前，这样，被注解的方法就会在所有测试方法启动之前或者都结束之后执行一次。&lt;/p>
&lt;p>2、@Test只能注解方法，并且它有两个可选属性： 1）timeout：设定测试方法最多&lt;/p></description></item><item><title>JUnit 学习笔记 第一记</title><link>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E8%AE%B0/</link><pubDate>Sun, 29 Jun 2014 12:11:31 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E8%AE%B0/</guid><description>1、在开发一个大型项目的时候，一般都会把项目实现逻辑分层由不同的开发人员各自实现，不同层次之间会发生互相的调用等等。这么一来，一旦一个部分出现错误，就可能导致其它部分的错误，为了查明错误的来源往往需要逐层排查，耗费很多时间和成本。因此，有必须保证不同开发人员提交的程序代码的正确性，至少是符合开发人员自己的要求。这个保证就需要开发人员对自己开发的代码进行测试，JUnit框架就是为了解决这个问题而出现</description></item></channel></rss>