<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on 琴弦第七</title><link>https://www.qinxiandiqi.sbs/tags/java/</link><description>Recent content in java on 琴弦第七</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2012-2022 Jianan. All Rights Reserved.</copyright><lastBuildDate>Mon, 07 Nov 2022 23:21:18 +0800</lastBuildDate><atom:link href="https://www.qinxiandiqi.sbs/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>当选作key类型的hashCode可变时，HashMap会发生什么呢?</title><link>https://www.qinxiandiqi.sbs/posts/kotlin/%E5%BD%93%E9%80%89%E4%BD%9Ckey%E7%B1%BB%E5%9E%8B%E7%9A%84hashcode%E5%8F%AF%E5%8F%98%E6%97%B6hashmap%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%E5%91%A2/</link><pubDate>Mon, 07 Nov 2022 23:21:18 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/kotlin/%E5%BD%93%E9%80%89%E4%BD%9Ckey%E7%B1%BB%E5%9E%8B%E7%9A%84hashcode%E5%8F%AF%E5%8F%98%E6%97%B6hashmap%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%E5%91%A2/</guid><description>当选作key类型的hashCode可变时，HashMap会发生什么呢?</description></item><item><title>transient修饰对象成员变量反序列化为null</title><link>https://www.qinxiandiqi.sbs/posts/java/transient%E4%BF%AE%E9%A5%B0%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BAnull/</link><pubDate>Mon, 21 Dec 2020 16:54:31 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/transient%E4%BF%AE%E9%A5%B0%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%BAnull/</guid><description>&lt;ol>
&lt;li>transient关键字的用途 用于在实现Serializable接口的类中标记成员变量，使该类对象在序列化和反序列化过程中忽略该成员变量的处理。 2. transient序列化和反序列化过程中的处理方式
在序列化过程中，transient关键字修饰的成员变量默认处理方式使直接忽略 在反序列化过程中，transient关键字修饰的成员变量默认赋值该成员变量类型的默认值，例如int型为0，boolean为false，对象类型为null。&lt;/li>
&lt;li>transient默认处理方式引发的问题 反序列化过程中&lt;/li>
&lt;/ol></description></item><item><title>libGDX的线程</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%BA%BF%E7%A8%8B/</link><pubDate>Sun, 26 Aug 2018 13:37:49 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%BA%BF%E7%A8%8B/</guid><description>所有ApplicationListener接口中的方法都会在同个OpenGL的渲染线程中被调用。对于大多数游戏来说，一般在ApplicationListener.render()方法中实现游戏的更新逻辑，这个方法会在渲染线程中执行。
任何涉及OpenGL的图形操作都需要在渲染线程上执行。如果在其它线程上执行会导致一些无法预测的结果，这是因为OpenGL Context只有在渲染线程中才处于激活状态，对于大多数Android设备而言，在其它线程中创建OpenGL Context会导致一些问题，因此不支持这</description></item><item><title>libGDX的日志</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%97%A5%E5%BF%97/</link><pubDate>Sun, 05 Aug 2018 11:55:14 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%97%A5%E5%BF%97/</guid><description>Application接口提供了简单但可以精确控制的日志打印功能。
日志消息可以输出为普通信息，或者是带可选异常的错误消息，也可以是调试信息：</description></item><item><title>libGDX的模块</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%A8%A1%E5%9D%97/</link><pubDate>Sun, 15 Jul 2018 16:36:03 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E6%A8%A1%E5%9D%97/</guid><description>LibGDX，对应典型游戏设计架构的每个步骤，它都提供了一系列模块来提供相应服务。
Input输入模块 - 为所有平台提供了统一的输入和处理模型。它支持键盘、触屏、加速度计和鼠标等可用输入设备。 Graphics图形模块 - 它通过OpenGL ES API的方式使用硬件，将图形绘制到屏幕上。 Files文件模块 - 它不关心具体操作的媒体文件类型，它为所有平台统一提供了抽象化的，简易的方法来进行媒体文件的读写操作。 Audio音频模块 - 提供了有助于在所有平台上录制和播放音频的功能。</description></item><item><title>libGDX的生命周期</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</link><pubDate>Sun, 01 Jul 2018 15:53:00 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</guid><description>libGDX应用程序具有明确定义的生命周期，用于处理应用程序的不同的状态，例如应用程序的创建、暂停、恢复、渲染和（销毁）释放等等。</description></item><item><title>libGDX的应用框架</title><link>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/</link><pubDate>Sun, 01 Jul 2018 14:34:08 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/libgdx/libgdx%E7%9A%84%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/</guid><description>作为libGDX的核心（译注：也是libGDX实现跨平台的基础），libGDX提供了6个通用接口来与具体的操作系统进行交互，不同的操作系统对这6个接口有不同的具体实现。</description></item><item><title>Java语言使用注解处理器生成代码——第三部分：生成源代码</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E7%94%9F%E6%88%90%E6%BA%90%E4%BB%A3%E7%A0%81/</link><pubDate>Sat, 24 Oct 2015 19:50:39 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E7%94%9F%E6%88%90%E6%BA%90%E4%BB%A3%E7%A0%81/</guid><description>本文是我的“使用Java语言注解处理器生成代码”系列第三部分，也是最后一部分。在第一部分中（请阅读这里），我们介绍了什么是Java语言的注解，以及一些常用的方法。在第二部分中（请阅读这里），我们介绍了注解处理器，以及注解处理器如何创建和运行。
现在，在第三部分中，我们要学习如何使用注解处理器来生成源代码。</description></item><item><title>Java语言使用注解处理器生成代码——第二部分：注解处理器</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/</link><pubDate>Fri, 16 Oct 2015 19:14:10 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/</guid><description>本文是我的“关于Java语言使用注解处理器生成代码”系列第二部分。在第一部分中（请阅读这里)，我们介绍了什么是Java语言的注解，以及它们的几种常用方式。
现在，在这第二部分中，我们将介绍注解处理器。包括如何创建注解处理器，以及如何运行它们。</description></item><item><title>Java语言使用注解处理器生成代码 —— 第一部分：注解类型</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 09 Oct 2015 14:05:19 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B/</guid><description>从本文开始，我将开始写一系列关于Java语言使用注解处理器生成代码的文章，包括这种方法的强大之处。最后还会描述如何确保在编译的时候使用这种方法生成源代码。在这系列文章中，我们将会： 介绍Java语言的注解。 了解注解的常用方式以及使用范围。 了解注解处理器以及它们所代表的角色。 学习如何创建注解处理器。 学习如何在终端命令行、Eclipse和Maven中运行注解处理器。 学习如何使用注解处理器生成源</description></item><item><title>Gson用户指南</title><link>https://www.qinxiandiqi.sbs/posts/java/gson%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/</link><pubDate>Sun, 07 Sep 2014 12:02:18 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/gson%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/</guid><description>作者：Inderjeet Singh, Joel Leitch, Jesse Wilson
1、Overview（概览）
Gson是一个Java类库，用于将Java对象转换为它们所代表的JSON数据，也可以用于将一个JSON字符串转换为对应的Java对象。Gson是一个开源项目，托管于http://code.google.com/p/google-gson。
Gson可以用于任意</description></item><item><title>Ant学习笔记</title><link>https://www.qinxiandiqi.sbs/posts/ant%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 11 Jul 2014 12:26:02 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/ant%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>1、Ant（another neat tool）是一个基于Java的生成工具，其作用类似于命令的批处理，通过设置一个xml文件后，Ant将会执行xml文件中指定的系列命令。这对于随着应用程序的生成过程变得更加复杂，又需要确保在每次生成期间都使用精确相同的生成步骤，同时实现尽可能多的自动化，以便于及时产生一致的生成版本非常重要。
2、Ant是基于命令行操作的。单纯使用ant命令时，Ant将会在</description></item><item><title>JUnit 学习笔记 第二记</title><link>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</link><pubDate>Sun, 29 Jun 2014 12:28:31 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</guid><description>&lt;p>1、JUnit4添加了新的方法用于在测试类中所有测试方法执行之前或者执行之后执行，具体使用方法是使用注解@BeforeClass或者@AfterClass注解注解在public static void修饰的并且没有参数的方法之前，这样，被注解的方法就会在所有测试方法启动之前或者都结束之后执行一次。&lt;/p>
&lt;p>2、@Test只能注解方法，并且它有两个可选属性： 1）timeout：设定测试方法最多&lt;/p></description></item><item><title>JUnit 学习笔记 第一记</title><link>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E8%AE%B0/</link><pubDate>Sun, 29 Jun 2014 12:11:31 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E8%AE%B0/</guid><description>1、在开发一个大型项目的时候，一般都会把项目实现逻辑分层由不同的开发人员各自实现，不同层次之间会发生互相的调用等等。这么一来，一旦一个部分出现错误，就可能导致其它部分的错误，为了查明错误的来源往往需要逐层排查，耗费很多时间和成本。因此，有必须保证不同开发人员提交的程序代码的正确性，至少是符合开发人员自己的要求。这个保证就需要开发人员对自己开发的代码进行测试，JUnit框架就是为了解决这个问题而出现</description></item><item><title>Java SE 学习笔记 第十七记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%B8%83%E8%AE%B0/</link><pubDate>Tue, 17 Jun 2014 12:04:02 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%B8%83%E8%AE%B0/</guid><description>&lt;p>1、java.lang.ClassLoader抽象类中的方法若使用String类型作为参数表示一个类的话，需要使用类的二进制名称。每个Class对象都包含一个定义它的ClassLoader的引用。&lt;/p>
&lt;p>2、java.lang.ClassLoader抽象类的方法loadClass(String name)接收一个类的二进制名字，用于加载这个类，并由Java虚拟机创建这个类的Class对象作为结&lt;/p></description></item><item><title>Java SE 学习笔记 第十六记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AE%B0/</link><pubDate>Tue, 17 Jun 2014 11:35:17 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E5%85%AD%E8%AE%B0/</guid><description>1、Dom4J的document.asXML();将document的XML文档转换为字符串。 2、InputStream的read方法在输入数据可用，或者检测到流末尾以及抛出异常之前，read方法一直处于阻塞状态。 3、Java虚拟机：当应用程序执行的时候会先创建一个JVM虚拟机进程以及一个主线程来执行应用程序。 4、Java虚拟机结束生命周期的情况： 1）执行了System.exit(</description></item><item><title>JavaSE学习笔记第十五记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AE%B0/</link><pubDate>Wed, 11 Jun 2014 14:50:37 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AE%B0/</guid><description>Java的XML解析</description></item><item><title>JavaSE学习笔记 第十四记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AE%B0/</link><pubDate>Wed, 11 Jun 2014 14:42:51 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AE%B0/</guid><description>Java的xml解析</description></item><item><title>JavaSE学习笔记 第十三记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AE%B0/</link><pubDate>Mon, 09 Jun 2014 14:18:05 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AE%B0/</guid><description>Java的网络编程。</description></item><item><title>JavaSE学习笔记 第十二记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AE%B0/</link><pubDate>Fri, 06 Jun 2014 09:22:57 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AE%B0/</guid><description>Java的线程锁操作，Java对象的浅拷贝和深拷贝，Java的网络编程。</description></item><item><title>JavaSE学习笔记 第十一记 —— 线程</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AE%B0/</link><pubDate>Thu, 05 Jun 2014 10:00:14 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AE%B0/</guid><description>Java线程的使用</description></item><item><title>JavaSE学习笔记 第十记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E8%AE%B0/</link><pubDate>Wed, 04 Jun 2014 14:31:47 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%8D%81%E8%AE%B0/</guid><description>Java的io操作，装饰模式的一般构成，常见字符集的区别，Java对象的序列化和反序列化。</description></item><item><title>JavaSE学习笔记 第九记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B9%9D%E8%AE%B0/</link><pubDate>Mon, 02 Jun 2014 10:41:04 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B9%9D%E8%AE%B0/</guid><description>Java文件系统和Java IO的使用。</description></item><item><title>JavaSE学习笔记 第八记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AB%E8%AE%B0/</link><pubDate>Mon, 02 Jun 2014 09:40:02 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AB%E8%AE%B0/</guid><description>Java的GUI系统，AWT和Swing。委托模式和观察者模式的使用。Java内部类的类型和使用。</description></item><item><title>JavaSE学习笔记 第七记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%83%E8%AE%B0/</link><pubDate>Sun, 01 Jun 2014 11:19:26 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%83%E8%AE%B0/</guid><description>代理模式和策略模式的区别，Java注解的使用，JUnit的使用，Java一场的使用。</description></item><item><title>JavaSE学习笔记 第六记 —— 代理模式</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AD%E8%AE%B0/</link><pubDate>Sun, 14 Oct 2012 08:24:27 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%85%AD%E8%AE%B0/</guid><description>Java的枚举类型，反射的的使用，代理模式（静态代理和动态代理）。</description></item><item><title>Java SE 学习笔记 第五记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%94%E8%AE%B0/</link><pubDate>Wed, 10 Oct 2012 08:32:08 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%94%E8%AE%B0/</guid><description>Java的泛型和包装类。</description></item><item><title>Java SE 学习笔记 第四记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E8%AE%B0/</link><pubDate>Tue, 09 Oct 2012 11:15:11 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E5%9B%9B%E8%AE%B0/</guid><description>Java的集合和字典，list、set、map、tree；设计模式之策略模式。</description></item><item><title>Java SE 学习笔记 第三记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%89%E8%AE%B0/</link><pubDate>Mon, 08 Oct 2012 14:18:10 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%89%E8%AE%B0/</guid><description>Java字符串对象的存储特征；Java数组和集合的使用。</description></item><item><title>Java SE 学习笔记 第二记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</link><pubDate>Sun, 07 Oct 2012 08:49:06 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</guid><description>Java对象的构造过程，Java类的多态。设计模式的单例模式。</description></item><item><title>Java SE 学习笔记 第一记</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E8%AE%B0/</link><pubDate>Sat, 06 Oct 2012 10:27:35 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/javase%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E8%AE%B0/</guid><description>Jdk重要工具，Java基本数据类型，Java类的组织方式。</description></item></channel></rss>