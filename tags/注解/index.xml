<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>注解 on 琴弦第七</title><link>https://www.qinxiandiqi.sbs/tags/%E6%B3%A8%E8%A7%A3/</link><description>Recent content in 注解 on 琴弦第七</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2012-2022 Jianan. All Rights Reserved.</copyright><lastBuildDate>Fri, 09 Oct 2015 14:05:19 +0800</lastBuildDate><atom:link href="https://www.qinxiandiqi.sbs/tags/%E6%B3%A8%E8%A7%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>Java语言使用注解处理器生成代码 —— 第一部分：注解类型</title><link>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 09 Oct 2015 14:05:19 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/java%E8%AF%AD%E8%A8%80%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E6%B3%A8%E8%A7%A3%E7%B1%BB%E5%9E%8B/</guid><description>从本文开始，我将开始写一系列关于Java语言使用注解处理器生成代码的文章，包括这种方法的强大之处。最后还会描述如何确保在编译的时候使用这种方法生成源代码。在这系列文章中，我们将会： 介绍Java语言的注解。 了解注解的常用方式以及使用范围。 了解注解处理器以及它们所代表的角色。 学习如何创建注解处理器。 学习如何在终端命令行、Eclipse和Maven中运行注解处理器。 学习如何使用注解处理器生成源</description></item><item><title>JUnit 学习笔记 第二记</title><link>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</link><pubDate>Sun, 29 Jun 2014 12:28:31 +0800</pubDate><guid>https://www.qinxiandiqi.sbs/posts/java/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/junit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E8%AE%B0/</guid><description>&lt;p>1、JUnit4添加了新的方法用于在测试类中所有测试方法执行之前或者执行之后执行，具体使用方法是使用注解@BeforeClass或者@AfterClass注解注解在public static void修饰的并且没有参数的方法之前，这样，被注解的方法就会在所有测试方法启动之前或者都结束之后执行一次。&lt;/p>
&lt;p>2、@Test只能注解方法，并且它有两个可选属性： 1）timeout：设定测试方法最多&lt;/p></description></item></channel></rss>